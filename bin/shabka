#! /usr/bin/env bash

set -euo pipefail

declare __VERBOSE="${__VERBOSE:-0}"

echoErr() { >&2 echo -e "\e[1;31m[ERR] ${*}\e[0m" ; }
echoWarn() { >&2 echo -e "\e[1;33m[WARN] ${*}\e[0m" ; }
echoInfo() { >&2 echo -e "\e[1;34m[INFO] ${*}\e[0m" ; }
echoDebug1() {
  if [[ "${__VERBOSE}" -lt 1 ]]; then
    return
  fi
  >&2 echo -e "\e[1;35m[DEBUG1] ${*}\e[0m"
}
echoDebug2() {
  if [[ "${__VERBOSE}" -lt 2 ]]; then
    return
  fi
  >&2 echo -e "\e[1;35m[DEBUG2] ${*}\e[0m"
}
echoDebug3() {
  if [[ "${__VERBOSE}" -lt 3 ]]; then
    return
  fi
  >&2 echo -e "\e[1;35m[DEBUG3] ${*}\e[0m"
}
echoSuccess() { >&2 echo -e "\e[1;32m[SUCCESS] ${*}\e[0m" ; }

echoUsage() {
  >&2 echo "Usage: shabka [OPTION]... [COMMAND]... [ARGUMENTS]"
  >&2 echo ""

  declare -r current_uname="$(uname -s | tr -d '\n')"
  if [[ "${current_uname}" == "Darwin" ]]; then
    >&2 echo "Commands switch, activate and check"
    >&2 echo -e -n "\tshabka [-h host] [-r release] "
    >&2 echo -e -n "{ switch | activate | check } "
    >&2 echo -e -n "[darwin-rebuild arguments and options]\n\n"
  else
    >&2 echo "Commands switch, boot, test, dry-build and dry-activate"
    >&2 echo -e -n "\tshabka [-h host] [-r release] "
    >&2 echo -e -n "{ switch | boot | test | dry-build | dry-activate } "
    >&2 echo -e -n "[nixos-rebuild arguments and options]\n\n"
  fi

  >&2 echo "Command build"
  >&2 echo -e -n "\tshabka [-h host] [-r release] build "
  >&2 echo -e -n "[nix-build arguments and options]\n\n"

  >&2 echo "Command push-to-cachix"
  >&2 echo -e -n "\tshabka push-to-cachix <cache-name> [host1] [host2] [...]\n"
  >&2 echo -e -n "\tIf no host is specified, it defaults to all hosts defined in "
  >&2 echo -e -n "your .shabka folder.\n\n"

  >&2 echo -e -n "By default the host is your current hostname. The release is "
  >&2 echo -e -n "the one defined in the host, if defined, else shabka's "
  >&2 echo -e -n "default release.\n"
  >&2 echo -e -n "For more informations about the switch, boot, test, "
  >&2 echo -e -n "dry-build, dry-activate, activate and check commands, see "
  >&2 echo -e -n "nixos-rebuild(8) and darwin-rebuild(8).\n"
}

setShabkaPath() {
  desc="Set the global readonly shabka_path variable to point to the path where
        shabka is stored."

  # TODO: always get the shabka path from a default location/channel
  declare -g -r shabka_path="$(cd $(dirname "${BASH_SOURCE[0]}")/../ && pwd)"

  echoDebug1 "shabka_path=${shabka_path}"
}

setDotshabkaPath() {
  desc="Set the global readonly dotshabka_path variable to point to the path
        where dotshabka is stored."

  # TODO: change this to be the default path of .shabka
  if [[ -z "${DOTSHABKA_PATH:-}" ]]; then
    echoErr "DOTSHABKA_PATH variable is required."
    exit 1
  fi

  declare -g -r dotshabka_path="${DOTSHABKA_PATH}"

  if ! [[ -d "${dotshabka_path}" ]]; then
    echoErr "DOTSHABKA_PATH: ${dotshabka_path}: No such directory."
    exit 1
  fi

  echoDebug1 "dotshabka_path=${dotshabka_path}"
}

getHostRelease() {
  desc="Get the release of a host, defaults to shabka's release.
        Usage: getHostRelease <host>
        Requires shabka_path and dotshabka_path to be set."

  local -r host="${1}"
  shift 1

  if [[ -r "${dotshabka_path}/hosts/${host}/release" ]]; then
    local -r host_release="$( cat "${dotshabka_path}/hosts/${host}/release" )"
    echoDebug2 "Setting host_release from ${dotshabka_path}/hosts/${host}/release"
  else
    # fallback to shabka's default release
    local -r host_release="$( tr -d "\n" < "${shabka_path}/release" )"
    echoDebug2 "Setting host_release from shabka's default release"
  fi

  echo "${host_release}"
  echoDebug1 "host_release=${host_release}"
}

getHostDistrib() {
  desc="Get the distribution of a host.
        Usage: getHostDistrib <host>
        Requires dotshabka_path to be set."

  local -r host="${1}"
  shift 1

  if [[ -r "${dotshabka_path}/hosts/${host}/distrib" ]]; then
    local -r host_distrib="$( cat "${dotshabka_path}/hosts/${host}/distrib" )"
  else
    echoErr "Required file does not exist: ${dotshabka_path}/hosts/${host}/distrib"
    exit 1
  fi
  echoDebug1 "host_distrib=${host_distrib}"

  case "${host_distrib}" in
    "Darwin"|"NixOS")
      echo "${host_distrib}"
      ;;
    "Linux")
      echoErr "Linux non-NixOS hosts not supported yet."
      exit 1
      ;;
    *)
      echoErr "Invalid value ${host_distrib} at ${dotshabka_path}/hosts/${host}/distrib"
      exit 1
      ;;
  esac
}

getNixPath() {
  desc="Compute the NIX_PATH from release and distribution.
        Usage: getNixPath <release> <distrib>
        Requires shabka_path and dotshabka_path to be set."

  local -r nixpkgs_release="${1}"
  local -r host_distrib="${2}"
  shift 2

  local -r nixpkgs="$( set -e;
                       nix-build --no-out-link "${shabka_path}" \
                       -A "external.nixpkgs.release-${release/./-}.path" )"
  local nix_path="nixpkgs=${nixpkgs}:shabka=${shabka_path}:dotshabka=${dotshabka_path}"
  echoDebug2 "nix_path set with nixpkgs and shabka to '${nix_path}'"

  if [[ -z "${host_distrib:-}" ]] || [[ "${host_distrib}" == "Darwin" ]]; then
    local -r nix_darwin="$( set -e; \
                            nix-build --no-out-link "${shabka_path}" \
                            -A "external.nix-darwin.path" )"
    local nix_path="darwin=${nix_darwin}:${nix_path}"
    echoDebug2 "Added nix_darwin to nix_path: '${nix_path}'"
  fi

  echo "${nix_path}"
  echoDebug1 "nix_path=${nix_path}"
}

getConfigPath() {
  desc="Get the configuration.nix path for a host.
        Usage: getConfigPath <host>
        Requires dotshabka_path to be set."

  local -r host="${1}"
  shift 1

  local -r config_path="${dotshabka_path}/hosts/${host}/configuration.nix"
  if ! [[ -r "${config_path}" ]]; then
    echoErr "Configuration ${config_path} does not exist."
    exit 1
  fi

  echo "${config_path}"
  echoDebug1 "config_path=${config_path}"
}

buildHost() {
  desc="Build a host.
        Usage: buildHost <host> <release> [nix-build arguments and options]
        Requires shabka_path and dotshabka_path to be set."

  local -r host="${1}"
  local release="${2}"
  shift 2
  local distrib

  echoInfo "Building host ${host}"

  distrib="$( getHostDistrib "${host}" )" || exit "${?}"

  if [[ -z "${release:-}" ]]; then
    echoDebug2 "Release not set, setting it from the host's."
    release="$( getHostRelease "${host}" )" || exit "${?}"
  else
    echoDebug2 "Using provided release."
    release="${release}"
  fi

  export NIX_PATH="$( getNixPath "${release}" "${distrib}" )" || exit "${?}"

  (set -x; \
   RELEASE="release-${release/./-}" \
      nix-build "${dotshabka_path}/hosts/${host}" -A system "${@}"\
  ) || exit "${?}"

  echoSuccess "Finished building host ${host}."
}

rebuildHost() {
  desc="Rebuild a host.
        Usage: rebuildHost <command> <host> <release> [nixos-build arguments and options]
        Requires shabka_path and dotshabka_path to be set."

  local -r cmd="${1}"
  local -r host="${2}"
  local release="${3}"
  shift 3
  local distrib
  local configPath

  echoInfo "Executing rebuild ${cmd} on host ${host}"

  if [[ ! -e "${dotshabka_path}/secrets" ]]; then
    echoWarn "${dotshabka_path}/secrets does not exist."
  fi

  distrib="$( getHostDistrib "${host}" )" || exit "${?}"

  if [[ -z "${release:-}" ]]; then
    echoDebug2 "Release not set, setting it from the host's."
    release="$( getHostRelease "${host}" )" || exit "${?}"
  else
    echoDebug2 "Using provided release."
    release="${release}"
  fi

  export NIX_PATH="$( getNixPath "${release}" "${distrib}" )" || exit "${?}"

  configPath="$( getConfigPath "${host}" )" || exit "${?}"

  case "${distrib}" in
    "NixOS")
      (set -x; \
       RELEASE="release-${release/./-}" \
        nixos-rebuild -I "nixos-config=${configPath}" "${command}" "${@}" \
      ) || exit "${?}"
      ;;
    "Darwin")
      (set -x; \
       RELEASE="release-${release/./-}" \
        darwin-rebuild -I "darwin-config=${configPath}" "${command}" "${@}" \
      ) || exit "${?}"
      ;;
    # For future use
    "Linux")
      ;;
  esac

  echoSuccess "Finished rebuild ${cmd} for host ${host}."
}

pushHostToCachix() {
  desc="Push host to Cachix binary cache.
        Usage: pushHostToCachix <binary-cache-name> <release> <host>
        Requires shabka_path, dotshabka_path and CACHIX_SIGNING_KEY to be set."

  local -r binary_cache_name="${1}"
  local release="${2}"
  local -r host="${3}"
  shift 3
  local distrib

  echoInfo "Pushing host ${host} to Cachix ${binary_cache_name}"

  local -r current_uname="$( uname -s | tr -d '\n' )"
  distrib="$( getHostDistrib "${host}" )" || exit "${?}"

  if [[ "${current_uname}" == "Linux" ]] && [[ "${distrib}" == "Darwin" ]]; then
    echoWarn "The host ${host} of type ${distrib} cannot be built on ${current_uname}"
    return
  elif [[ "${current_uname}" == "Darwin" ]] && ([[ "${distrib}" == "Nixos" ]] || [[ "${distrib}" == "Linux" ]]); then
    echoWarn "The host ${host} of type ${distrib} cannot be built on ${current_uname}"
    return
  fi

  buildHost "${host}" "${release}" | cachix push "${binary_cache_name}"
  echoSuccess "Finished pushing host ${host} to Cachix ${binary_cache_name}"
}

pushToCachix() {
  desc="Push host(s) to Cachix binary cache.
        Usage: pushToCachix <binary-cache-name> <release> [host1] [host2] [...]
        Requires shabka_path, dotshabka_path and CACHIX_SIGNING_KEY to be set."

  local -r binary_cache_name="${1}"
  local -r release="${2}"
  shift 2

  echoInfo "Pushing hosts ${@} to Cachix ${binary_cache_name}"

  # check that cachix CLI tool is installed
  if ! command -v cachix >/dev/null 2>&1; then
    echoErr "Cachix CLI tool is required to push to Cachix!"
    exit 1
  fi

  # I don't want to ever make the mistake of pushing while my private files are
  # accessible. This is meant to go away eventually, see #216 for more
  # information
  if [[ -e "${dotshabka_path}/secrets" ]]; then
    echoErr "${dotshabka_path}/secrets exists. Will not continue!"
    exit 1
  fi

  if [[ -z "${CACHIX_SIGNING_KEY:-}" ]]; then
    echoErr "Please set the environment variable CACHIX_SIGNING_KEY before calling the script."
    exit 1
  fi

  if [[ "${#}" -ne 0 ]]; then
    while [[ "${#}" -ne 0 ]]; do
      local host="${1}"
      shift
      pushHostToCachix "${binary_cache_name}" "${release}" "${host}"
    done
    echoSuccess "Finished pushing hosts '${@}' to Cachix ${binary_cache_name}"
    return
  fi

  echoInfo "No hosts specified, pushing all hosts."
  for host_path in "${dotshabka_path}"/hosts/*; do
    pushHostToCachix "${binary_cache_name}" "${release}" "$( basename "${host_path}" )"
  done
  echoSuccess "Finished pushing all hosts to Cachix ${binary_cache_name}"
}

doExec() {
  desc="Execute a command
        Usage: doExec <host> <release> <command> [command arguments]
        Requires shabka_path and dotshabka_path to be set."

  local -r host="${1}"
  local release="${2}"
  shift 2
  local distrib
  local configPath

  if [[ ! -e "${dotshabka_path}/secrets" ]]; then
    echoWarn "${dotshabka_path}/secrets does not exist."
  fi

  distrib="$( getHostDistrib "${host}" )" || exit "${?}"

  if [[ -z "${release:-}" ]]; then
    echoDebug2 "Release not set, setting it from the host's."
    release="$( getHostRelease "${host}" )" || exit "${?}"
  else
    echoDebug2 "Using provided release."
    release="${release}"
  fi

  export NIX_PATH="$( getNixPath "${release}" "${distrib}" )" || exit "${?}"

  configPath="$( getConfigPath "${host}" )" || exit "${?}"
  export NIX_PATH="${NIX_PATH}:nixos-config=${configPath}"

  RELEASE="release-${release/./-}" \
    "${@}"
}

main() {
  if [[ "$#" -eq 0 ]]; then
    echoUsage
    exit 1
  fi

  local host="$( hostname -s )"
  local release=

  while getopts ":h:r:v" opt; do
      case "${opt}" in
        h)
          local host="${OPTARG}"
          ;;
        r)
          local release="${OPTARG}"
          ;;
        v)
          __VERBOSE="$(( ${__VERBOSE} + 1 ))"
          ;;
        :)
          echoErr "Invalid option: -$OPTARG requires an argument"
          echoUsage
          exit 1
          ;;
        \?)
          # end of possible arguments, rest are for the command
          break
          ;;
      esac
  done
  shift $((OPTIND -1))

  local -r host="${host}"
  local -r release="${release}"

  if [[ "${#}" -eq 0 ]]; then
    echoErr "No command specified"
    echoUsage
    exit 1
  fi

  declare -r command="${1}"
  shift 1

  setShabkaPath
  setDotshabkaPath

  case "${command}" in
    "help")
      echoUsage
      exit 0
      ;;
    "build")
      buildHost "${host}" "${release}" "${@}"
    ;;
    "switch"|"boot"|"test"|"dry-build"|"dry-activate"|"activate"|"check")
      rebuildHost "${command}" "${host}" "${release}" "${@}"
      ;;
    "push-to-cachix")
      if [[ "${#}" -eq 0 ]]; then
        echoErr "Cachix binary cache name missing."
        echoUsage
        exit 1
      fi
      local -r binary_cache_name="${1}"
      shift 1

      pushToCachix "${binary_cache_name}" "${release}" "${@}"
      ;;
    "exec")
      doExec "${host}" "${release}" "${@}"
      ;;
    *)
      echoErr "Unkown command: ${command}"
      echoUsage
      exit 1
      ;;
  esac
}

[[ "$0" == "$BASH_SOURCE" ]] && main "$@" || true
